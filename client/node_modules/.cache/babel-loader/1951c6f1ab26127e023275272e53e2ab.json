{"ast":null,"code":"var _jsxFileName = \"/Users/jackiedong/Desktop/CSProjects/YMajors/client/src/components/Home/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from \"react\";\nimport MajorDataService from \"../../services/MajorRequirements.js\";\nimport SearchBar from \"./SearchBar\";\nimport MajorNames from \"../../data/data.json\";\nimport UserContext from \"../../contexts/UserContext\";\nimport \"./index.scss\";\nimport { CardContent, Card, Typography, Grid, Checkbox, CardHeader } from \"@mui/material\";\nimport { Masonry } from \"@mui/lab\";\nimport UserCourseService from \"../../services/UserCourseList.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const {\n    courseList\n  } = useContext(UserContext);\n  const initialMajorState = {\n    majorName: \"\",\n    majorCode: \"\",\n    majorComponentFamilies: []\n  };\n  const [majorData, setMajorData] = useState(initialMajorState);\n  const [checkedCourses, setCheckedCourses] = useState(courseList);\n  const [componentLimit, setComponentLimit] = useState([]);\n  const [componentFamilyLimit, setComponentFamilyLimit] = useState([]);\n  /**\n   * updates the checked courses, the database, as well as the limits for both components and componentfamilys\n   * @param checkedCourse is the course that is being checkedd\n   * @param checkedComponentName is the course family name that is being updated\n   * @param componentIndex is the course component to which the course belongs to\n   * @param componentFamilyIndex is which componentFamily the course belongs to\n   */\n\n  const handleOnChange = (checkedCourse, checkedComponentName, componentIndex, componentFamilyIndex) => {\n    // copy the componentLimit array\n    const updatedComponentLimit = [...componentLimit]; // copy the componentFamilyLimit array\n\n    const updatedComponentFamilyLimit = [...componentFamilyLimit];\n    const updatedCheckedCourses = checkedCourses !== null && checkedCourses !== void 0 && checkedCourses.includes(checkedCourse) ? checkedCourses === null || checkedCourses === void 0 ? void 0 : checkedCourses.filter(name => name !== checkedCourse) : [...(checkedCourses !== null && checkedCourses !== void 0 ? checkedCourses : []), checkedCourse];\n    let difference = updatedCheckedCourses.filter(x => !checkedCourses.includes(x)); // This means that we added the course\n\n    if (difference.length > 0) {\n      // Add the course to the databas\n      UserCourseService.add(checkedCourse); // Add the course to the checked list for that component\n\n      updatedComponentLimit[componentIndex].checked.push(checkedCourse); // if that component is now satisfied then we want to add that to the component family's satisfied components\n\n      if (updatedComponentLimit[componentIndex].checked.length >= updatedComponentLimit[componentIndex].limit) {\n        updatedComponentFamilyLimit[componentFamilyIndex].checkedComponentFamily.push(checkedComponentName);\n      }\n    } // if the difference length is none then that means we unchecked a box\n    else {\n      // Delete the course from our database\n      UserCourseService.delete(checkedCourse); // Add the course to the updatedComponentLimit array at the component index where course lies\n\n      updatedComponentLimit[componentIndex].checked.pop(checkedCourse); // Pop that component family (pop will return null if not found anyways)\n\n      updatedComponentFamilyLimit[componentFamilyIndex].checkedComponentFamily.pop(checkedComponentName);\n    } // set the componentFamilyLimit array and componentLimit array and checked courses\n\n\n    setComponentLimit(updatedComponentLimit);\n    setComponentFamilyLimit(updatedComponentFamilyLimit);\n    setCheckedCourses(updatedCheckedCourses);\n  };\n  /**\n   * returns a boolean determining if a checkbox is disabled or not\n   * @param course deals with which course we are checking should be disabled or not\n   * @param componentIndex deals with which component we are looking at\n   * @param componentFamilyIndex deals with which compoentFamily we are looking at\n   */\n\n\n  const isDisabled = (course, componentIndex, componentFamilyIndex) => {\n    // if the component family limit has been reached then just return if the checkbox has already been checked\n    if (componentFamilyLimit[componentFamilyIndex].checkedComponentFamily.length >= componentFamilyLimit[componentFamilyIndex].limit) return componentLimit[componentIndex].checked.indexOf(course) === -1; // if the component family limit has not been reached then check if the component itself has been meet and\n    // if the element has been checked already\n    else {\n      return componentLimit[componentIndex].checked.length >= componentLimit[componentIndex].limit && // If not already checked\n      componentLimit[componentIndex].checked.indexOf(course) === -1;\n    }\n  };\n\n  const getData = async query => {\n    var newCheckedComponentList = [];\n    var newCheckedComponentFamilyList = [];\n    MajorDataService.find(query).then(response => {\n      setMajorData(response.data);\n\n      if (response.data.majorComponentFamilies) {\n        // Looping through the component families\n        response.data.majorComponentFamilies.forEach(ComponentFamily => {\n          // gets the limit from the component family\n          var componentFamilyLimit = parseInt(ComponentFamily.required_num_components);\n          var newComponentFamilyList = []; // Loops through each of the components in each component family\n\n          ComponentFamily.component_list.forEach(component => {\n            // courselimit on each component\n            var courseLimit = parseInt(component.required_num_courses); // the course list for a component\n\n            var newUserCourseList = []; // Loops through all of the courses in each component\n\n            component.course_list.forEach(course => {\n              // if the courselist includes the course then add that to the course list\n              if (courseList.includes(course)) {\n                newUserCourseList.push(course);\n              }\n            }); // Add to the checked array for components\n\n            newCheckedComponentList.push({\n              checked: newUserCourseList,\n              limit: courseLimit\n            });\n\n            if (newUserCourseList.length === courseLimit) {\n              newComponentFamilyList.push(ComponentFamily.component_family_name);\n            }\n          });\n          newCheckedComponentFamilyList.push({\n            checkedComponentFamily: newComponentFamilyList,\n            limit: componentFamilyLimit\n          });\n        });\n        setComponentLimit(newCheckedComponentList);\n        setComponentFamilyLimit(newCheckedComponentFamilyList);\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const renderCourseRequirements = (requiredCourses, componentIndex, componentFamilyIndex, componentFamilyName) => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      children: requiredCourses.map((course, index) => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          lg: 4,\n          xl: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"CourseCard\",\n            variant: \"outlined\",\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              action: /*#__PURE__*/_jsxDEV(Checkbox, {\n                name: course,\n                value: course,\n                className: \"header\",\n                disabled: isDisabled(course, componentIndex, componentFamilyIndex),\n                checked: checkedCourses.includes(course),\n                onChange: () => handleOnChange(course, componentFamilyName, componentIndex, componentFamilyIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 21\n              }, this),\n              title: /*#__PURE__*/_jsxDEV(Typography, {\n                className: \"CourseTitle\",\n                color: \"textSecondary\",\n                gutterBottom: true,\n                children: course\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              className: \"content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)\n        }, index + course, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this);\n  };\n\n  var componentCount = 0;\n\n  const renderComponents = (components, componentFamilyIndex, componentFamilyName) => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      direction: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: components.map((component, index) => {\n        var temp_index = componentCount;\n        componentCount = componentCount + 1;\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          className: \"grid\",\n          xs: 12,\n          lg: 4,\n          xl: 2,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"ComponentCard\",\n            variant: \"outlined\",\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: \"ComponentTitle\",\n                color: \"textSecondary\",\n                gutterBottom: true,\n                children: component.component_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: \"pos\",\n                color: \"textSecondary\",\n                children: [\"Required # of Courses: \", component.required_num_courses]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this), renderCourseRequirements(component.course_list, temp_index, componentFamilyIndex, componentFamilyName)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)\n        }, index + component.component_name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderComponentFamilies = majorComponentFamilies => {\n    return /*#__PURE__*/_jsxDEV(Masonry, {\n      className: \"masonry\",\n      columns: 3,\n      spacing: 2,\n      children: majorComponentFamilies.map((componentFamily, index) => {\n        if (componentFamily.component_list.length > 1) return /*#__PURE__*/_jsxDEV(Card, {\n          className: \"ComponentFamilyCard\",\n          variant: \"outlined\",\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: \"ComponentFamilyTitle\",\n              color: \"textSecondary\",\n              gutterBottom: true,\n              children: componentFamily.component_family_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: \"pos\",\n              color: \"textSecondary\",\n              children: [\"Required # of Components :\", \" \", componentFamily.required_num_components]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 19\n            }, this), renderComponents(componentFamily.component_list, index, componentFamily.component_family_name)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 17\n          }, this)\n        }, index + componentFamily.component_family_name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 15\n        }, this);\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: renderComponents(componentFamily.component_list, index, componentFamily.component_family_name)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container home\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      placeholder: \"Enter Major Name ...\",\n      data: MajorNames,\n      onChange: value => getData(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mui-grid\",\n      children: Array.isArray(majorData.majorComponentFamilies) && majorData.majorComponentFamilies.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [majorData.majorName, \" (\", majorData.majorCode, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this), renderComponentFamilies(majorData.majorComponentFamilies)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"YP3YFk5HUEOsIXBvs1WjzKOCsjU=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useContext","MajorDataService","SearchBar","MajorNames","UserContext","CardContent","Card","Typography","Grid","Checkbox","CardHeader","Masonry","UserCourseService","Home","courseList","initialMajorState","majorName","majorCode","majorComponentFamilies","majorData","setMajorData","checkedCourses","setCheckedCourses","componentLimit","setComponentLimit","componentFamilyLimit","setComponentFamilyLimit","handleOnChange","checkedCourse","checkedComponentName","componentIndex","componentFamilyIndex","updatedComponentLimit","updatedComponentFamilyLimit","updatedCheckedCourses","includes","filter","name","difference","x","length","add","checked","push","limit","checkedComponentFamily","delete","pop","isDisabled","course","indexOf","getData","query","newCheckedComponentList","newCheckedComponentFamilyList","find","then","response","data","forEach","ComponentFamily","parseInt","required_num_components","newComponentFamilyList","component_list","component","courseLimit","required_num_courses","newUserCourseList","course_list","component_family_name","catch","e","console","log","renderCourseRequirements","requiredCourses","componentFamilyName","map","index","componentCount","renderComponents","components","temp_index","component_name","renderComponentFamilies","componentFamily","value","Array","isArray"],"sources":["/Users/jackiedong/Desktop/CSProjects/YMajors/client/src/components/Home/index.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\nimport MajorDataService from \"../../services/MajorRequirements.js\";\nimport SearchBar from \"./SearchBar\";\nimport MajorNames from \"../../data/data.json\";\nimport UserContext from \"../../contexts/UserContext\";\nimport \"./index.scss\";\nimport {\n  CardContent,\n  Card,\n  Typography,\n  Grid,\n  Checkbox,\n  CardHeader,\n} from \"@mui/material\";\nimport { Masonry } from \"@mui/lab\";\nimport UserCourseService from \"../../services/UserCourseList.js\";\n\nconst Home = () => {\n  const { courseList } = useContext(UserContext);\n\n  const initialMajorState = {\n    majorName: \"\",\n    majorCode: \"\",\n    majorComponentFamilies: [],\n  };\n\n  const [majorData, setMajorData] = useState(initialMajorState);\n  const [checkedCourses, setCheckedCourses] = useState(courseList);\n  const [componentLimit, setComponentLimit] = useState([]);\n  const [componentFamilyLimit, setComponentFamilyLimit] = useState([]);\n\n  /**\n   * updates the checked courses, the database, as well as the limits for both components and componentfamilys\n   * @param checkedCourse is the course that is being checkedd\n   * @param checkedComponentName is the course family name that is being updated\n   * @param componentIndex is the course component to which the course belongs to\n   * @param componentFamilyIndex is which componentFamily the course belongs to\n   */\n  const handleOnChange = (\n    checkedCourse,\n    checkedComponentName,\n    componentIndex,\n    componentFamilyIndex\n  ) => {\n    // copy the componentLimit array\n    const updatedComponentLimit = [...componentLimit];\n    // copy the componentFamilyLimit array\n    const updatedComponentFamilyLimit = [...componentFamilyLimit];\n\n    const updatedCheckedCourses = checkedCourses?.includes(checkedCourse)\n      ? checkedCourses?.filter((name) => name !== checkedCourse)\n      : [...(checkedCourses ?? []), checkedCourse];\n\n    let difference = updatedCheckedCourses.filter(\n      (x) => !checkedCourses.includes(x)\n    );\n\n    // This means that we added the course\n    if (difference.length > 0) {\n      // Add the course to the databas\n      UserCourseService.add(checkedCourse);\n      // Add the course to the checked list for that component\n      updatedComponentLimit[componentIndex].checked.push(checkedCourse);\n      // if that component is now satisfied then we want to add that to the component family's satisfied components\n      if (\n        updatedComponentLimit[componentIndex].checked.length >=\n        updatedComponentLimit[componentIndex].limit\n      ) {\n        updatedComponentFamilyLimit[\n          componentFamilyIndex\n        ].checkedComponentFamily.push(checkedComponentName);\n      }\n    }\n    // if the difference length is none then that means we unchecked a box\n    else {\n      // Delete the course from our database\n      UserCourseService.delete(checkedCourse);\n\n      // Add the course to the updatedComponentLimit array at the component index where course lies\n      updatedComponentLimit[componentIndex].checked.pop(checkedCourse);\n\n      // Pop that component family (pop will return null if not found anyways)\n      updatedComponentFamilyLimit[\n        componentFamilyIndex\n      ].checkedComponentFamily.pop(checkedComponentName);\n    }\n\n    // set the componentFamilyLimit array and componentLimit array and checked courses\n    setComponentLimit(updatedComponentLimit);\n    setComponentFamilyLimit(updatedComponentFamilyLimit);\n    setCheckedCourses(updatedCheckedCourses);\n  };\n\n  /**\n   * returns a boolean determining if a checkbox is disabled or not\n   * @param course deals with which course we are checking should be disabled or not\n   * @param componentIndex deals with which component we are looking at\n   * @param componentFamilyIndex deals with which compoentFamily we are looking at\n   */\n  const isDisabled = (course, componentIndex, componentFamilyIndex) => {\n    // if the component family limit has been reached then just return if the checkbox has already been checked\n    if (\n      componentFamilyLimit[componentFamilyIndex].checkedComponentFamily\n        .length >= componentFamilyLimit[componentFamilyIndex].limit\n    )\n      return componentLimit[componentIndex].checked.indexOf(course) === -1;\n    // if the component family limit has not been reached then check if the component itself has been meet and\n    // if the element has been checked already\n    else {\n      return (\n        componentLimit[componentIndex].checked.length >=\n          componentLimit[componentIndex].limit &&\n        // If not already checked\n        componentLimit[componentIndex].checked.indexOf(course) === -1\n      );\n    }\n  };\n\n  const getData = async (query) => {\n    var newCheckedComponentList = [];\n    var newCheckedComponentFamilyList = [];\n    MajorDataService.find(query)\n      .then((response) => {\n        setMajorData(response.data);\n        if (response.data.majorComponentFamilies) {\n          // Looping through the component families\n\n          response.data.majorComponentFamilies.forEach((ComponentFamily) => {\n            // gets the limit from the component family\n            var componentFamilyLimit = parseInt(\n              ComponentFamily.required_num_components\n            );\n            var newComponentFamilyList = [];\n\n            // Loops through each of the components in each component family\n            ComponentFamily.component_list.forEach((component) => {\n              // courselimit on each component\n              var courseLimit = parseInt(component.required_num_courses);\n\n              // the course list for a component\n              var newUserCourseList = [];\n\n              // Loops through all of the courses in each component\n              component.course_list.forEach((course) => {\n                // if the courselist includes the course then add that to the course list\n                if (courseList.includes(course)) {\n                  newUserCourseList.push(course);\n                }\n              });\n\n              // Add to the checked array for components\n              newCheckedComponentList.push({\n                checked: newUserCourseList,\n                limit: courseLimit,\n              });\n\n              if (newUserCourseList.length === courseLimit) {\n                newComponentFamilyList.push(\n                  ComponentFamily.component_family_name\n                );\n              }\n            });\n\n            newCheckedComponentFamilyList.push({\n              checkedComponentFamily: newComponentFamilyList,\n              limit: componentFamilyLimit,\n            });\n          });\n          setComponentLimit(newCheckedComponentList);\n          setComponentFamilyLimit(newCheckedComponentFamilyList);\n        }\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n  const renderCourseRequirements = (\n    requiredCourses,\n    componentIndex,\n    componentFamilyIndex,\n    componentFamilyName\n  ) => {\n    return (\n      <Grid container spacing={1}>\n        {requiredCourses.map((course, index) => {\n          return (\n            <Grid key={index + course} item xs={6} lg={4} xl={4}>\n              <Card className=\"CourseCard\" variant=\"outlined\">\n                <CardHeader\n                  action={\n                    <Checkbox\n                      name={course}\n                      value={course}\n                      className=\"header\"\n                      disabled={isDisabled(\n                        course,\n                        componentIndex,\n                        componentFamilyIndex\n                      )}\n                      checked={checkedCourses.includes(course)}\n                      onChange={() =>\n                        handleOnChange(\n                          course,\n                          componentFamilyName,\n                          componentIndex,\n                          componentFamilyIndex\n                        )\n                      }\n                    />\n                  }\n                  title={\n                    <Typography\n                      className=\"CourseTitle\"\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      {course}\n                    </Typography>\n                  }\n                ></CardHeader>\n                <CardContent className=\"content\"></CardContent>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  };\n\n  var componentCount = 0;\n  const renderComponents = (\n    components,\n    componentFamilyIndex,\n    componentFamilyName\n  ) => {\n    return (\n      <Grid\n        container\n        spacing={1}\n        direction=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        {components.map((component, index) => {\n          var temp_index = componentCount;\n          componentCount = componentCount + 1;\n          return (\n            <Grid\n              key={index + component.component_name}\n              item\n              className=\"grid\"\n              xs={12}\n              lg={4}\n              xl={2}\n            >\n              <Card className=\"ComponentCard\" variant=\"outlined\">\n                <CardContent>\n                  <Typography\n                    className=\"ComponentTitle\"\n                    color=\"textSecondary\"\n                    gutterBottom\n                  >\n                    {component.component_name}\n                  </Typography>\n                  <Typography className=\"pos\" color=\"textSecondary\">\n                    Required # of Courses: {component.required_num_courses}\n                  </Typography>\n                  {renderCourseRequirements(\n                    component.course_list,\n                    temp_index,\n                    componentFamilyIndex,\n                    componentFamilyName\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  };\n\n  const renderComponentFamilies = (majorComponentFamilies) => {\n    return (\n      <Masonry className=\"masonry\" columns={3} spacing={2}>\n        {majorComponentFamilies.map((componentFamily, index) => {\n          if (componentFamily.component_list.length > 1)\n            return (\n              <Card\n                key={index + componentFamily.component_family_name}\n                className=\"ComponentFamilyCard\"\n                variant=\"outlined\"\n              >\n                <CardContent>\n                  <Typography\n                    className=\"ComponentFamilyTitle\"\n                    color=\"textSecondary\"\n                    gutterBottom\n                  >\n                    {componentFamily.component_family_name}\n                  </Typography>\n                  <Typography className=\"pos\" color=\"textSecondary\">\n                    Required # of Components :{\" \"}\n                    {componentFamily.required_num_components}\n                  </Typography>\n                  {renderComponents(\n                    componentFamily.component_list,\n                    index,\n                    componentFamily.component_family_name\n                  )}\n                </CardContent>\n              </Card>\n            );\n          return (\n            <>\n              {renderComponents(\n                componentFamily.component_list,\n                index,\n                componentFamily.component_family_name\n              )}\n            </>\n          );\n        })}\n      </Masonry>\n    );\n  };\n  return (\n    <div className=\"container home\">\n      <SearchBar\n        placeholder=\"Enter Major Name ...\"\n        data={MajorNames}\n        onChange={(value) => getData(value)}\n      />\n      <div className=\"mui-grid\">\n        {Array.isArray(majorData.majorComponentFamilies) &&\n        majorData.majorComponentFamilies.length > 0 ? (\n          <>\n            <h1>\n              {majorData.majorName} ({majorData.majorCode})\n            </h1>\n            {renderComponentFamilies(majorData.majorComponentFamilies)}\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}