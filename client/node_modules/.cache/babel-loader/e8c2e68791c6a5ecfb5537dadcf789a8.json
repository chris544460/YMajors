{"ast":null,"code":"var _jsxFileName = \"/Users/jackiedong/Desktop/CSProjects/YMajors/client/src/components/Home/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport MajorDataService from \"../../services/MajorRequirements.js\";\nimport SearchBar from \"./SearchBar\";\nimport MajorNames from \"../../data/data.json\";\nimport UserContext from \"../../contexts/UserContext\";\nimport \"./index.scss\";\nimport { CardContent, Card, Typography, Grid, Checkbox, CardHeader } from \"@mui/material\";\nimport { Masonry } from \"@mui/lab\";\nimport UserCourseService from \"../../services/UserCourseList.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const {\n    courseList\n  } = useContext(UserContext);\n  const initialMajorState = {\n    majorName: \"\",\n    majorCode: \"\",\n    majorComponentFamilies: []\n  };\n  const [majorData, setMajorData] = useState(initialMajorState);\n  const [coursesCheckedState, setCoursesCheckedState] = useState(courseList);\n  const [checkedLimitComponent, setCheckedLimitComponent] = useState([]);\n  const [checkedLimitComoponentFamily, setCheckedLimitComponentFamily] = useState([]);\n\n  const handleOnChange = (checkedName, index) => {\n    const updatedCheckArray = [...checkedLimitComponent];\n    const updatedCheckedState = coursesCheckedState !== null && coursesCheckedState !== void 0 && coursesCheckedState.includes(checkedName) ? coursesCheckedState === null || coursesCheckedState === void 0 ? void 0 : coursesCheckedState.filter(name => name !== checkedName) : [...(coursesCheckedState !== null && coursesCheckedState !== void 0 ? coursesCheckedState : []), checkedName];\n    let difference = updatedCheckedState.filter(x => !coursesCheckedState.includes(x));\n\n    if (difference.length > 0) {\n      UserCourseService.add(checkedName);\n      updatedCheckArray[index].checked.push(checkedName);\n    } else {\n      UserCourseService.delete(checkedName);\n      updatedCheckArray[index].checked.pop(checkedName);\n    }\n\n    setCoursesCheckedState(updatedCheckedState);\n    return updatedCheckedState;\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const isDisabled = (course, componentIndex, componentFamilyIndex) => {\n    console.log(course, checkedLimitComoponentFamily[componentFamilyIndex].checkedComponentFamily.length >= checkedLimitComoponentFamily[componentFamilyIndex].limit, checkedLimitComponent[componentIndex].checked.length >= checkedLimitComponent[componentIndex].limit, checkedLimitComponent[componentIndex].checked.indexOf(course) === -1);\n    if (checkedLimitComoponentFamily[componentFamilyIndex].checkedComponentFamily.length >= checkedLimitComoponentFamily[componentFamilyIndex].limit) return checkedLimitComponent[componentIndex].checked.indexOf(course) === -1;else {\n      return checkedLimitComponent[componentIndex].checked.length >= checkedLimitComponent[componentIndex].limit && // If not already checked\n      checkedLimitComponent[componentIndex].checked.indexOf(course) === -1;\n    }\n  };\n\n  const getData = async query => {\n    var newCheckedComponentList = [];\n    var newCheckedComponentFamilyList = [];\n    MajorDataService.find(query).then(response => {\n      setMajorData(response.data);\n\n      if (response.data.majorComponentFamilies) {\n        // Looping through the component families\n        response.data.majorComponentFamilies.forEach(ComponentFamily => {\n          // gets the limit from the component family\n          var componentFamilyLimit = parseInt(ComponentFamily.required_num_components);\n          var newComponentFamilyList = []; // Loops through each of the components in each component family\n\n          ComponentFamily.component_list.forEach(component => {\n            // courselimit on each component\n            var courseLimit = parseInt(component.required_num_courses); // the course list for a component\n\n            var newUserCourseList = []; // Loops through all of the courses in each component\n\n            component.course_list.forEach(course => {\n              // if the courselist includes the course then add that to the course list\n              if (courseList.includes(course)) {\n                newUserCourseList.push(course);\n              }\n            }); // Add to the checked array for components\n\n            newCheckedComponentList.push({\n              checked: newUserCourseList,\n              limit: courseLimit\n            });\n\n            if (newUserCourseList.length === courseLimit) {\n              newComponentFamilyList.push(ComponentFamily.component_family_name);\n            }\n          });\n          newCheckedComponentFamilyList.push({\n            checkedComponentFamily: newComponentFamilyList,\n            limit: componentFamilyLimit\n          });\n        });\n        setCheckedLimitComponent(newCheckedComponentList);\n        setCheckedLimitComponentFamily(newCheckedComponentFamilyList);\n      }\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const renderCourseRequirements = (requiredCourses, componentIndex, componentFamilyIndex) => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      children: requiredCourses.map((course, index) => {\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 6,\n          lg: 4,\n          xl: 4,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"CourseCard\",\n            variant: \"outlined\",\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              action: /*#__PURE__*/_jsxDEV(Checkbox, {\n                name: course,\n                value: course,\n                className: \"header\",\n                disabled: isDisabled(course, componentIndex, componentFamilyIndex),\n                checked: coursesCheckedState.includes(course),\n                onChange: () => handleOnChange(course, componentIndex)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 21\n              }, this),\n              title: /*#__PURE__*/_jsxDEV(Typography, {\n                className: \"CourseTitle\",\n                color: \"textSecondary\",\n                gutterBottom: true,\n                children: course\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              className: \"content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this)\n        }, index + course, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this);\n  };\n\n  var componentCount = 0;\n\n  const renderComponents = (components, componentFamilyIndex) => {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      direction: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: components.map((component, index) => {\n        var temp_index = componentCount;\n        componentCount = componentCount + 1;\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          className: \"grid\",\n          xs: 12,\n          lg: 4,\n          xl: 2,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"ComponentCard\",\n            variant: \"outlined\",\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                className: \"ComponentTitle\",\n                color: \"textSecondary\",\n                gutterBottom: true,\n                children: component.component_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                className: \"pos\",\n                color: \"textSecondary\",\n                children: [\"Required # of Courses: \", component.required_num_courses]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 19\n              }, this), renderCourseRequirements(component.course_list, temp_index, componentFamilyIndex)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this)\n        }, index + component.component_name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  };\n\n  const renderComponentFamilies = majorComponentFamilies => {\n    return /*#__PURE__*/_jsxDEV(Masonry, {\n      className: \"masonry\",\n      columns: 3,\n      spacing: 2,\n      children: majorComponentFamilies.map((componentFamily, index) => {\n        if (componentFamily.component_list.length > 1) return /*#__PURE__*/_jsxDEV(Card, {\n          className: \"ComponentFamilyCard\",\n          variant: \"outlined\",\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              className: \"ComponentFamilyTitle\",\n              color: \"textSecondary\",\n              gutterBottom: true,\n              children: componentFamily.component_family_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              className: \"pos\",\n              color: \"textSecondary\",\n              children: [\"Required # of Components :\", \" \", componentFamily.required_num_components]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 19\n            }, this), renderComponents(componentFamily.component_list, index)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this)\n        }, index + componentFamily.component_family_name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }, this);\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: renderComponents(componentFamily.component_list, index)\n        }, void 0, false);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container home\",\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      placeholder: \"Enter Major Name ...\",\n      data: MajorNames,\n      onChange: value => getData(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mui-grid\",\n      children: Array.isArray(majorData.majorComponentFamilies) && majorData.majorComponentFamilies.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [majorData.majorName, \" (\", majorData.majorCode, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), renderComponentFamilies(majorData.majorComponentFamilies)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"OTMn6wwntRs5F5xoykawXuHJ6KQ=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useContext","MajorDataService","SearchBar","MajorNames","UserContext","CardContent","Card","Typography","Grid","Checkbox","CardHeader","Masonry","UserCourseService","Home","courseList","initialMajorState","majorName","majorCode","majorComponentFamilies","majorData","setMajorData","coursesCheckedState","setCoursesCheckedState","checkedLimitComponent","setCheckedLimitComponent","checkedLimitComoponentFamily","setCheckedLimitComponentFamily","handleOnChange","checkedName","index","updatedCheckArray","updatedCheckedState","includes","filter","name","difference","x","length","add","checked","push","delete","pop","getData","isDisabled","course","componentIndex","componentFamilyIndex","console","log","checkedComponentFamily","limit","indexOf","query","newCheckedComponentList","newCheckedComponentFamilyList","find","then","response","data","forEach","ComponentFamily","componentFamilyLimit","parseInt","required_num_components","newComponentFamilyList","component_list","component","courseLimit","required_num_courses","newUserCourseList","course_list","component_family_name","catch","e","renderCourseRequirements","requiredCourses","map","componentCount","renderComponents","components","temp_index","component_name","renderComponentFamilies","componentFamily","value","Array","isArray"],"sources":["/Users/jackiedong/Desktop/CSProjects/YMajors/client/src/components/Home/index.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport MajorDataService from \"../../services/MajorRequirements.js\";\nimport SearchBar from \"./SearchBar\";\nimport MajorNames from \"../../data/data.json\";\nimport UserContext from \"../../contexts/UserContext\";\nimport \"./index.scss\";\nimport {\n  CardContent,\n  Card,\n  Typography,\n  Grid,\n  Checkbox,\n  CardHeader,\n} from \"@mui/material\";\nimport { Masonry } from \"@mui/lab\";\nimport UserCourseService from \"../../services/UserCourseList.js\";\n\nconst Home = () => {\n  const { courseList } = useContext(UserContext);\n\n  const initialMajorState = {\n    majorName: \"\",\n    majorCode: \"\",\n    majorComponentFamilies: [],\n  };\n\n  const [majorData, setMajorData] = useState(initialMajorState);\n  const [coursesCheckedState, setCoursesCheckedState] = useState(courseList);\n  const [checkedLimitComponent, setCheckedLimitComponent] = useState([]);\n  const [checkedLimitComoponentFamily, setCheckedLimitComponentFamily] =\n    useState([]);\n\n  const handleOnChange = (checkedName, index) => {\n    const updatedCheckArray = [...checkedLimitComponent];\n    const updatedCheckedState = coursesCheckedState?.includes(checkedName)\n      ? coursesCheckedState?.filter((name) => name !== checkedName)\n      : [...(coursesCheckedState ?? []), checkedName];\n\n    let difference = updatedCheckedState.filter(\n      (x) => !coursesCheckedState.includes(x)\n    );\n\n    if (difference.length > 0) {\n      UserCourseService.add(checkedName);\n      updatedCheckArray[index].checked.push(checkedName);\n    } else {\n      UserCourseService.delete(checkedName);\n      updatedCheckArray[index].checked.pop(checkedName);\n    }\n\n    setCoursesCheckedState(updatedCheckedState);\n    return updatedCheckedState;\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const isDisabled = (course, componentIndex, componentFamilyIndex) => {\n    console.log(\n      course,\n      checkedLimitComoponentFamily[componentFamilyIndex].checkedComponentFamily\n        .length >= checkedLimitComoponentFamily[componentFamilyIndex].limit,\n      checkedLimitComponent[componentIndex].checked.length >=\n        checkedLimitComponent[componentIndex].limit,\n      checkedLimitComponent[componentIndex].checked.indexOf(course) === -1\n    );\n    if (\n      checkedLimitComoponentFamily[componentFamilyIndex].checkedComponentFamily\n        .length >= checkedLimitComoponentFamily[componentFamilyIndex].limit\n    )\n      return (\n        checkedLimitComponent[componentIndex].checked.indexOf(course) === -1\n      );\n    else {\n      return (\n        checkedLimitComponent[componentIndex].checked.length >=\n          checkedLimitComponent[componentIndex].limit &&\n        // If not already checked\n        checkedLimitComponent[componentIndex].checked.indexOf(course) === -1\n      );\n    }\n  };\n\n  const getData = async (query) => {\n    var newCheckedComponentList = [];\n    var newCheckedComponentFamilyList = [];\n    MajorDataService.find(query)\n      .then((response) => {\n        setMajorData(response.data);\n        if (response.data.majorComponentFamilies) {\n          // Looping through the component families\n\n          response.data.majorComponentFamilies.forEach((ComponentFamily) => {\n            // gets the limit from the component family\n            var componentFamilyLimit = parseInt(\n              ComponentFamily.required_num_components\n            );\n            var newComponentFamilyList = [];\n\n            // Loops through each of the components in each component family\n            ComponentFamily.component_list.forEach((component) => {\n              // courselimit on each component\n              var courseLimit = parseInt(component.required_num_courses);\n\n              // the course list for a component\n              var newUserCourseList = [];\n\n              // Loops through all of the courses in each component\n              component.course_list.forEach((course) => {\n                // if the courselist includes the course then add that to the course list\n                if (courseList.includes(course)) {\n                  newUserCourseList.push(course);\n                }\n              });\n\n              // Add to the checked array for components\n              newCheckedComponentList.push({\n                checked: newUserCourseList,\n                limit: courseLimit,\n              });\n\n              if (newUserCourseList.length === courseLimit) {\n                newComponentFamilyList.push(\n                  ComponentFamily.component_family_name\n                );\n              }\n            });\n\n            newCheckedComponentFamilyList.push({\n              checkedComponentFamily: newComponentFamilyList,\n              limit: componentFamilyLimit,\n            });\n          });\n          setCheckedLimitComponent(newCheckedComponentList);\n          setCheckedLimitComponentFamily(newCheckedComponentFamilyList);\n        }\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n  const renderCourseRequirements = (\n    requiredCourses,\n    componentIndex,\n    componentFamilyIndex\n  ) => {\n    return (\n      <Grid container spacing={1}>\n        {requiredCourses.map((course, index) => {\n          return (\n            <Grid key={index + course} item xs={6} lg={4} xl={4}>\n              <Card className=\"CourseCard\" variant=\"outlined\">\n                <CardHeader\n                  action={\n                    <Checkbox\n                      name={course}\n                      value={course}\n                      className=\"header\"\n                      disabled={isDisabled(\n                        course,\n                        componentIndex,\n                        componentFamilyIndex\n                      )}\n                      checked={coursesCheckedState.includes(course)}\n                      onChange={() => handleOnChange(course, componentIndex)}\n                    />\n                  }\n                  title={\n                    <Typography\n                      className=\"CourseTitle\"\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      {course}\n                    </Typography>\n                  }\n                ></CardHeader>\n                <CardContent className=\"content\"></CardContent>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  };\n\n  var componentCount = 0;\n  const renderComponents = (components, componentFamilyIndex) => {\n    return (\n      <Grid\n        container\n        spacing={1}\n        direction=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        {components.map((component, index) => {\n          var temp_index = componentCount;\n          componentCount = componentCount + 1;\n          return (\n            <Grid\n              key={index + component.component_name}\n              item\n              className=\"grid\"\n              xs={12}\n              lg={4}\n              xl={2}\n            >\n              <Card className=\"ComponentCard\" variant=\"outlined\">\n                <CardContent>\n                  <Typography\n                    className=\"ComponentTitle\"\n                    color=\"textSecondary\"\n                    gutterBottom\n                  >\n                    {component.component_name}\n                  </Typography>\n                  <Typography className=\"pos\" color=\"textSecondary\">\n                    Required # of Courses: {component.required_num_courses}\n                  </Typography>\n                  {renderCourseRequirements(\n                    component.course_list,\n                    temp_index,\n                    componentFamilyIndex\n                  )}\n                </CardContent>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    );\n  };\n\n  const renderComponentFamilies = (majorComponentFamilies) => {\n    return (\n      <Masonry className=\"masonry\" columns={3} spacing={2}>\n        {majorComponentFamilies.map((componentFamily, index) => {\n          if (componentFamily.component_list.length > 1)\n            return (\n              <Card\n                key={index + componentFamily.component_family_name}\n                className=\"ComponentFamilyCard\"\n                variant=\"outlined\"\n              >\n                <CardContent>\n                  <Typography\n                    className=\"ComponentFamilyTitle\"\n                    color=\"textSecondary\"\n                    gutterBottom\n                  >\n                    {componentFamily.component_family_name}\n                  </Typography>\n                  <Typography className=\"pos\" color=\"textSecondary\">\n                    Required # of Components :{\" \"}\n                    {componentFamily.required_num_components}\n                  </Typography>\n                  {renderComponents(componentFamily.component_list, index)}\n                </CardContent>\n              </Card>\n            );\n          return <>{renderComponents(componentFamily.component_list, index)}</>;\n        })}\n      </Masonry>\n    );\n  };\n  return (\n    <div className=\"container home\">\n      <SearchBar\n        placeholder=\"Enter Major Name ...\"\n        data={MajorNames}\n        onChange={(value) => getData(value)}\n      />\n      <div className=\"mui-grid\">\n        {Array.isArray(majorData.majorComponentFamilies) &&\n        majorData.majorComponentFamilies.length > 0 ? (\n          <>\n            <h1>\n              {majorData.majorName} ({majorData.majorCode})\n            </h1>\n            {renderComponentFamilies(majorData.majorComponentFamilies)}\n          </>\n        ) : (\n          <></>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}